import random
import timeit
import math

def swap(L, i, j):
    temp = L[i]
    L[i] = L[j]
    L[j] = temp

def bubble_sort(L):
    for i in range(len(L)):
        for j in range(len(L) - 1):
            if L[j] > L[j+1]:
                swap(L, j, j+1)


def bubble_sort_opt1(L):
    for i in range(len(L)):
        for j in range(len(L) - 1 - i):
            if L[j] > L[j+1]:
                swap(L, j, j+1)


def bubble_sort_opt2(L):
    for i in range(len(L)):
        swaps = 0
        for j in range(len(L) - 1):
            if L[j] > L[j+1]:
                swap(L, j, j+1)
                swaps += 1
        if swaps == 0:
            return


def bubble_sort_opt3(L):
    for i in range(len(L)):
        swaps = 0
        for j in range(len(L) - 1 - i):
            if L[j] > L[j+1]:
                swap(L, j, j+1)
                swaps += 1
        if swaps == 0:
            return

def insertion_sort(L):
    for i in range(1, len(L)):
        insert_into(L, i)

def insert_into(L, n):
    i = n
    while i > 0:
        if L[i] < L[i-1]:
            swap(L, i, i-1)
        else:
            return
        i -= 1

def selection_sort(L):
    for i in range(len(L)):
        mindex = find_min_index(L, i)
        swap(L, i, mindex)


def find_min_index(L, n):
    mindex = n
    for i in range(n+1, len(L)):
        if L[i] < L[mindex]:
            mindex = i
    return mindex

def create_near_sorted_list(n, factor):
    L = create_random_list(n, n)
    L.sort()
    for _ in range(math.ceil(n * factor)):
        r1 = random.randint(0, n - 1)
        r2 = random.randint(0, n - 1)
        swap(L, r1, r2)
    return L


def timetest(runs, length, sort, factor):
    total = 0
    for _ in range(runs):
        L = create_near_sorted_list(length, factor)
        start = timeit.default_timer()
        sort(L)
        end = timeit.default_timer()
        total += end - start
    return total/runs

def create_random_list(length, upper):
    return [random.randint(0,upper) for _ in range(length)]

factor = 0.205
for i in range(100, 2000, 100):
   print(i, timetest(50, i, selection_sort, factor), timetest(50, i, insertion_sort, factor))






for i in range(100, 10000, 100):
    print(i, timetest(10, i, bubble_sort), timetest(10, i, bubble_sort_opt1), timetest(10, i, bubble_sort_opt2), timetest(10, i, bubble_sort_opt3))

def selection_sort(L):
    for i in range(len(L)):
        j = find_min_index(L, i)
        swap(L, i, j)


def two_way_selection_sort(L):
    left, right = 0, len(L)-1
    while right > left:
        i, j = find_minmax_index(L, left, right)
        swap(L, left, i)
        swap(L, j, right)
        left += 1
        right -= 1

def find_min_index(L, n):
    min_index = n
    min_value = L[n]
    for i in range(n, len(L)):
        if min_value > L[i]:
            min_index = i
            min_value = L[i]
    return min_index

def find_minmax_index(L, left, right):
    min_index = max_index = left
    min_value = max_value = L[left]
    for i in range(left, right + 1):
        if min_value > L[i]:
            min_index = i
            min_value = L[i]
        elif max_value < L[i]:
            max_index = i
            max_value = L[i]
    return (min_index, max_index)
